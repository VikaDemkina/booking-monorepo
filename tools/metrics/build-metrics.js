#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ—Ç—Ä–∏–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const METRICS_DIR = path.join(process.cwd(), 'metrics-data');
fs.ensureDirSync(METRICS_DIR);

const BUILD_METRICS_FILE = path.join(METRICS_DIR, 'build-metrics.json');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∏ –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
console.log('üîÑ –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏...');
const startTime = Date.now();

try {
  // –≠–º—É–ª–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  console.log('–ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏...');
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å execSync('pnpm build') –∏–ª–∏ –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–±–æ—Ä–∫–∏
  setTimeout(() => {
    // –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    const endTime = Date.now();
    const buildTime = endTime - startTime;
    
    console.log(`‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${buildTime / 1000} —Å–µ–∫—É–Ω–¥.`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    let commitHash;
    try {
      commitHash = execSync('git rev-parse HEAD').toString().trim();
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à –∫–æ–º–º–∏—Ç–∞:', error.message);
      commitHash = 'unknown';
    }
    
    const metrics = {
      buildTime,
      timestamp: new Date().toISOString(),
      commitHash,
    };
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    let allMetrics = [];
    if (fs.existsSync(BUILD_METRICS_FILE)) {
      try {
        allMetrics = JSON.parse(fs.readFileSync(BUILD_METRICS_FILE, 'utf8'));
        if (!Array.isArray(allMetrics)) {
          console.warn('–§–∞–π–ª –º–µ—Ç—Ä–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.');
          allMetrics = [];
        }
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:', error.message);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    allMetrics.push(metrics);
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      fs.writeFileSync(BUILD_METRICS_FILE, JSON.stringify(allMetrics, null, 2));
      console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–±–æ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${BUILD_METRICS_FILE}`);
      
      // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –º–µ—Ç—Ä–∏–∫
      console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –º–µ—Ç—Ä–∏–∫:');
      if (fs.existsSync(BUILD_METRICS_FILE)) {
        console.log(fs.readFileSync(BUILD_METRICS_FILE, 'utf8'));
      } else {
        console.log('–§–∞–π–ª –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏!');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫:', error);
    }
    
  }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏:', error);
}