#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ—Ç—Ä–∏–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const METRICS_DIR = path.join(process.cwd(), 'metrics-data');
fs.ensureDirSync(METRICS_DIR);

const BUILD_METRICS_FILE = path.join(METRICS_DIR, 'build-metrics.json');

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∏ –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...');
const startTime = Date.now();

try {
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞
  execSync('pnpm --filter=@booking/common build', { stdio: 'inherit' });
  execSync('pnpm --filter=@booking/frontend build', { stdio: 'inherit' });
  
  const endTime = Date.now();
  const buildTime = endTime - startTime;
  
  console.log(`‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${buildTime / 1000} —Å–µ–∫—É–Ω–¥.`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
  const metrics = {
    buildTime,
    timestamp: new Date().toISOString(),
    commitHash: execSync('git rev-parse HEAD').toString().trim(),
  };
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  let allMetrics = [];
  if (fs.existsSync(BUILD_METRICS_FILE)) {
    allMetrics = JSON.parse(fs.readFileSync(BUILD_METRICS_FILE, 'utf8'));
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  allMetrics.push(metrics);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  fs.writeFileSync(BUILD_METRICS_FILE, JSON.stringify(allMetrics, null, 2));
  
  console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–±–æ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${BUILD_METRICS_FILE}`);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:', error);
  process.exit(1);
}